package compression;

import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

public class Compressor {

    private final Map<Character, String> huffmanCodes;
    private HuffmanNode root;

    public Compressor() {
        huffmanCodes = new HashMap<>();
    }

    private void buildHuffmanTree(String text) {
        Map<Character, Integer> frequencyMap = new HashMap<>();
        for (char c : text.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }

        PriorityQueue<HuffmanNode> priorityQueue = new PriorityQueue<>();
        for (Map.Entry<Character, Integer> entry : frequencyMap.entrySet()) {
            priorityQueue.offer(new HuffmanNode(entry.getKey(), entry.getValue()));
        }

        while (priorityQueue.size() > 1) {
            HuffmanNode left = priorityQueue.poll();
            HuffmanNode right = priorityQueue.poll();
            assert right != null; // left can't be null because there are at least two nodes in the priority queue
            HuffmanNode newNode = new HuffmanNode(left.frequency + right.frequency, left, right);
            priorityQueue.offer(newNode);
        }

        root = priorityQueue.poll();

        generateCodes(root, "");
    }

    private void generateCodes(HuffmanNode node, String code) {
        if (node == null) {
            return;
        }

        if (node.left == null && node.right == null) { // assign the Huffman code to the character
            huffmanCodes.put(node.character, code);
        }

        generateCodes(node.left, code + "0");
        generateCodes(node.right, code + "1");
    }

    public String compress(String text) {
        buildHuffmanTree(text);

        StringBuilder compressed = new StringBuilder();
        for (char c : text.toCharArray()) { // compressed string generated by concatenating the Huffman codes of each character
            compressed.append(huffmanCodes.get(c));
        }
        return compressed.toString();
    }

    public String decompress(String compressedText) {
        StringBuilder result = new StringBuilder();
        HuffmanNode currentNode = root;

        for (char bit : compressedText.toCharArray()) {
            if (currentNode == null) {
                throw new IllegalStateException("Invalid compressed text");
            }

            if (bit == '0') {
                currentNode = currentNode.left;
            } else {
                currentNode = currentNode.right;
            }

            if (currentNode != null && currentNode.left == null && currentNode.right == null) { // if leaf node, append character to result
                result.append(currentNode.character);
                currentNode = root;
            }
        }

        if (currentNode != root) {
            throw new IllegalStateException("Invalid compressed text");
        }

        return result.toString();
    }
}
